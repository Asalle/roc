// WARNING: This file has automatically been generated on Sat, 05 Oct 2019 17:36:41 CEST.
// Code generated by https://git.io/c-for-go. DO NOT EDIT.

package roc

/*
#cgo linux CFLAGS: -I"../../../lib/include"
#cgo linux LDFLAGS: -L"/home/asalle/me/roc/build/x86_64-pc-redhat-linux/gcc-9.1.1-release" -lroc

#include "../../../lib/include/roc/address.h"
#include "../../../lib/include/roc/config.h"
#include "../../../lib/include/roc/context.h"
#include "../../../lib/include/roc/frame.h"
#include "../../../lib/include/roc/log.h"
#include "../../../lib/include/roc/platform.h"
#include "../../../lib/include/roc/receiver.h"
#include "../../../lib/include/roc/sender.h"
#include <stdlib.h>
#include "cgo_helpers.h"
*/
import "C"
import "unsafe"

// AddressInit function as declared in roc/address.h:86
func AddressInit(address []Address, family Family, ip string, port int32) int32 {
	caddress, _ := unpackArgSAddress(address)
	cfamily, _ := (C.roc_family)(family), cgoAllocsUnknown
	cip, _ := unpackPCharString(ip)
	cport, _ := (C.int)(port), cgoAllocsUnknown
	__ret := C.roc_address_init(caddress, cfamily, cip, cport)
	packSAddress(address, caddress)
	__v := (int32)(__ret)
	return __v
}

// AddressFamily function as declared in roc/address.h:97
func AddressFamily(address []Address) Family {
	caddress, _ := unpackArgSAddress(address)
	__ret := C.roc_address_family(caddress)
	packSAddress(address, caddress)
	__v := (Family)(__ret)
	return __v
}

// AddressIp function as declared in roc/address.h:116
func AddressIp(address []Address, buf []byte, bufsz uint) string {
	caddress, _ := unpackArgSAddress(address)
	cbuf, _ := (*C.char)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&buf)).Data)), cgoAllocsUnknown
	cbufsz, _ := (C.size_t)(bufsz), cgoAllocsUnknown
	__ret := C.roc_address_ip(caddress, cbuf, cbufsz)
	packSAddress(address, caddress)
	__v := packPCharString(__ret)
	return __v
}

// AddressPort function as declared in roc/address.h:127
func AddressPort(address []Address) int32 {
	caddress, _ := unpackArgSAddress(address)
	__ret := C.roc_address_port(caddress)
	packSAddress(address, caddress)
	__v := (int32)(__ret)
	return __v
}

// ContextOpen function as declared in roc/context.h:55
func ContextOpen(config []ContextConfig) *Context {
	cconfig, _ := unpackArgSContextConfig(config)
	__ret := C.roc_context_open(cconfig)
	packSContextConfig(config, cconfig)
	__v := *(**Context)(unsafe.Pointer(&__ret))
	return __v
}

// ContextClose function as declared in roc/context.h:72
func ContextClose(context []Context) int32 {
	ccontext, _ := (*C.roc_context)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&context)).Data)), cgoAllocsUnknown
	__ret := C.roc_context_close(ccontext)
	__v := (int32)(__ret)
	return __v
}

// LogSetLevel function as declared in roc/log.h:76
func LogSetLevel(level LogLevel) {
	clevel, _ := (C.roc_log_level)(level), cgoAllocsUnknown
	C.roc_log_set_level(clevel)
}

// LogSetHandler function as declared in roc/log.h:90
func LogSetHandler(handler LogHandler) {
	chandler, _ := handler.PassValue()
	C.roc_log_set_handler(chandler)
}

// ReceiverOpen function as declared in roc/receiver.h:132
func ReceiverOpen(context []Context, config []ReceiverConfig) *Receiver {
	ccontext, _ := (*C.roc_context)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&context)).Data)), cgoAllocsUnknown
	cconfig, _ := unpackArgSReceiverConfig(config)
	__ret := C.roc_receiver_open(ccontext, cconfig)
	packSReceiverConfig(config, cconfig)
	__v := *(**Receiver)(unsafe.Pointer(&__ret))
	return __v
}

// ReceiverBind function as declared in roc/receiver.h:156
func ReceiverBind(receiver []Receiver, kind PortType, proto Protocol, address []Address) int32 {
	creceiver, _ := (*C.roc_receiver)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&receiver)).Data)), cgoAllocsUnknown
	ckind, _ := (C.roc_port_type)(kind), cgoAllocsUnknown
	cproto, _ := (C.roc_protocol)(proto), cgoAllocsUnknown
	caddress, _ := unpackArgSAddress(address)
	__ret := C.roc_receiver_bind(creceiver, ckind, cproto, caddress)
	packSAddress(address, caddress)
	__v := (int32)(__ret)
	return __v
}

// ReceiverRead function as declared in roc/receiver.h:180
func ReceiverRead(receiver []Receiver, frame []Frame) int32 {
	creceiver, _ := (*C.roc_receiver)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&receiver)).Data)), cgoAllocsUnknown
	cframe, _ := unpackArgSFrame(frame)
	__ret := C.roc_receiver_read(creceiver, cframe)
	packSFrame(frame, cframe)
	__v := (int32)(__ret)
	return __v
}

// ReceiverClose function as declared in roc/receiver.h:195
func ReceiverClose(receiver []Receiver) int32 {
	creceiver, _ := (*C.roc_receiver)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&receiver)).Data)), cgoAllocsUnknown
	__ret := C.roc_receiver_close(creceiver)
	__v := (int32)(__ret)
	return __v
}

// SenderOpen function as declared in roc/sender.h:111
func SenderOpen(context []Context, config []SenderConfig) *Sender {
	ccontext, _ := (*C.roc_context)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&context)).Data)), cgoAllocsUnknown
	cconfig, _ := unpackArgSSenderConfig(config)
	__ret := C.roc_sender_open(ccontext, cconfig)
	packSSenderConfig(config, cconfig)
	__v := *(**Sender)(unsafe.Pointer(&__ret))
	return __v
}

// SenderBind function as declared in roc/sender.h:134
func SenderBind(sender []Sender, address []Address) int32 {
	csender, _ := (*C.roc_sender)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&sender)).Data)), cgoAllocsUnknown
	caddress, _ := unpackArgSAddress(address)
	__ret := C.roc_sender_bind(csender, caddress)
	packSAddress(address, caddress)
	__v := (int32)(__ret)
	return __v
}

// SenderConnect function as declared in roc/sender.h:153
func SenderConnect(sender []Sender, kind PortType, proto Protocol, address []Address) int32 {
	csender, _ := (*C.roc_sender)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&sender)).Data)), cgoAllocsUnknown
	ckind, _ := (C.roc_port_type)(kind), cgoAllocsUnknown
	cproto, _ := (C.roc_protocol)(proto), cgoAllocsUnknown
	caddress, _ := unpackArgSAddress(address)
	__ret := C.roc_sender_connect(csender, ckind, cproto, caddress)
	packSAddress(address, caddress)
	__v := (int32)(__ret)
	return __v
}

// SenderWrite function as declared in roc/sender.h:177
func SenderWrite(sender []Sender, frame []Frame) int32 {
	csender, _ := (*C.roc_sender)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&sender)).Data)), cgoAllocsUnknown
	cframe, _ := unpackArgSFrame(frame)
	__ret := C.roc_sender_write(csender, cframe)
	packSFrame(frame, cframe)
	__v := (int32)(__ret)
	return __v
}

// SenderClose function as declared in roc/sender.h:192
func SenderClose(sender []Sender) int32 {
	csender, _ := (*C.roc_sender)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&sender)).Data)), cgoAllocsUnknown
	__ret := C.roc_sender_close(csender)
	__v := (int32)(__ret)
	return __v
}
